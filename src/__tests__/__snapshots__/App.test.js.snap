// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App component should render correctly 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withRouter(App)>
        <App
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
        >
          <Suspense
            fallback={
              <Bullseye>
                <Spinner
                  size="xl"
                />
              </Bullseye>
            }
          >
            <Switch>
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.lazy),
                    "_ctor": [Function],
                    "_result": Promise {},
                    "_status": 0,
                  }
                }
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                exact={true}
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/"
              />
            </Switch>
            <Bullseye>
              <div
                className="pf-l-bullseye"
              >
                <Spinner
                  size="xl"
                >
                  <span
                    aria-valuetext="Loading..."
                    className="pf-c-spinner pf-m-xl"
                    role="progressbar"
                  >
                    <span
                      className="pf-c-spinner__clipper"
                    />
                    <span
                      className="pf-c-spinner__lead-ball"
                    />
                    <span
                      className="pf-c-spinner__tail-ball"
                    />
                  </span>
                </Spinner>
              </div>
            </Bullseye>
          </Suspense>
        </App>
      </withRouter(App)>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`App component should render correctly with data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withRouter(App)
        technologies={
          Object {
            "foo": "bar",
          }
        }
      >
        <App
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          technologies={
            Object {
              "foo": "bar",
            }
          }
        >
          <Suspense
            fallback={
              <Bullseye>
                <Spinner
                  size="xl"
                />
              </Bullseye>
            }
          >
            <Switch>
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.lazy),
                    "_ctor": [Function],
                    "_result": [Function],
                    "_status": 1,
                  }
                }
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                exact={true}
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/"
              >
                <withRouter(Landing)
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                >
                  <Landing
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    loadTechnologies={[Function]}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                  >
                    <Loading>
                      <Connect(Main)>
                        <Main>
                          <section
                            className="pf-l-page__main-section pf-c-page__main-section"
                            page-type=""
                          >
                            <Spinner
                              centered={true}
                            >
                              <div
                                className="ins-c-spinner ins-m-center"
                                role="status"
                              >
                                <span
                                  className="pf-u-screen-reader"
                                >
                                  Loading...
                                </span>
                              </div>
                            </Spinner>
                          </section>
                        </Main>
                      </Connect(Main)>
                    </Loading>
                  </Landing>
                </withRouter(Landing)>
              </Route>
            </Switch>
          </Suspense>
        </App>
      </withRouter(App)>
    </Router>
  </BrowserRouter>
</Provider>
`;
